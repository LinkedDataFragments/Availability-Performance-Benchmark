#!/usr/bin/env node
/*! @license Â©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

var path = require('path'),
    http = require('http'),
    url = require('url'),
    spawn = require('child_process').spawn;
    fs = require('fs');
var clientPath = path.join(__dirname, 'ldf-client');

var MIME_JSON = 'application/json';
var MIME_TURTLE = 'text/turtle';
var MIME_PLAIN = 'text/plain';

// Parse arguments
var args = process.argv.slice(2);
if (args.length > 2 || /^--?h(elp)?$/.test(args[0])) {
  console.log('usage: ldf-client-http [config.json] [port]');
  return process.exit(1);
}
var hasConfig = args.length >= 1 && !/^\d+$/.test(args[0]),
    configFile = hasConfig ? args[0] : path.join(__dirname, '../config-default.json'),
    port = parseInt(hasConfig ? args[1] : args[0], 10) || 3000;

// Start server
var server = http.createServer(onRequest);
server.listen(port);
console.log('Server running on http://localhost:' + port + '/');

// Handle a request
function onRequest(request, response) {
  var requestUrl = url.parse(request.url, true),
      myPath = requestUrl.pathname,
      query = requestUrl.query.query;
  if (myPath !== '/sparql' || !query) {
    response.writeHead(404, { 'Content-type': MIME_JSON });
    response.end(JSON.stringify({ message: 'Resource not found' }));
  }
  // if(query.indexOf('PREFIX') >= 0) {
    // query = query.replace(/PREFIX [^\>]*?\>/g, '');
    // query = query.trim();
  // }
  // Security check on query (shouldn't be a file)
  if (/^\\|^\/|\.\.\\|\.\.\//.test(query))
    query = 'SELECT ';
  

  // jena client
  // var tempPath = path.join(__dirname, './query' + Math.random() + '.sparql');
  // var tempFile = fs.openSync(tempPath, 'w');
  // fs.writeSync(tempFile, query);
  // // Get the results of the query from the client
  // var client = spawn('java', ['-jar', 'C:/Ben/git/linked data fragments/ldf-jena/target/ldf-client-jar-with-dependencies.jar', configFile, tempPath],
                     // { stdio: ['ignore', 'pipe', 'pipe'] });
  // javascript client
  // Get the results of the query from the client
  var client = spawn(process.argv[0], [clientPath, configFile, query],
                     { stdio: ['ignore', 'pipe', 'pipe'] });
  // Write a successful data response
  client.stdout.setEncoding('utf8');
  client.stdout.once('data', function (data) {
    if (!response.headersSent) {
      response.writeHead(200, { 'Content-type': data[0] === '{' ? MIME_JSON : MIME_TURTLE });
      response.write(data);
      client.stdout.pipe(response);
    }
  });
  // Write an error response
  client.stderr.setEncoding('utf8');
  client.stderr.once('data', function (data) {
    if(data){
      if (!response.headersSent) {
        response.writeHead(400, { 'Content-type': MIME_PLAIN });
        response.write(data);
        client.stderr.pipe(response);
      }
    }
  });
  client.on('exit', function(code) {
    if (!response.headersSent) {
      if(code === 0) {
        response.writeHead(200, {});
        response.end();
      }
      else {
        response.writeHead(400, {});
        response.end();
      }
    }
  });

  // Stop the client if the connection is terminated
  response.on('close', function () { client.kill('SIGKILL'); });
}
