#!/usr/bin/env node
/*! @license ©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

// Retrieve and check arguments
var args = process.argv.slice(2);
if (args.length < 1 || args.length > 2 || /^--?h(elp)?$/.test(args[0])) {
  console.log('usage: ldf-client [config.json] query');
  return process.exit(1);
}

var fs = require('fs'),
    path = require('path'),
    N3 = require('n3'),
    SparqlIterator = require('../lib/iterators/SparqlIterator'),
    FragmentsClient = require('../lib/fragments/FragmentsClient'),
    Logger = require('../lib/util/Logger');

var queryMatcher = /^\s*(?:PREFIX|BASE|SELECT|CONSTRUCT|ASK|DESCRIBE)\s+/i;

Logger.disable();

// Parse and initialize configuration
var hasConfig = args.length >= 2,
    configFile = hasConfig ? args[0] : path.join(__dirname, '../config-default.json'),
    queryFile  = hasConfig ? args[1] : args[0],
    config = JSON.parse(fs.readFileSync(configFile, { encoding: 'utf8' })),
    isQuery = queryMatcher.test(queryFile),
    query = isQuery ? queryFile : fs.readFileSync(queryFile, { encoding: 'utf8' });
config.fragmentsClient = new FragmentsClient(config.datasource, config);

// Execute the query and output its results
try {
  var sparqlIterator = new SparqlIterator(query, config);
  switch (sparqlIterator.parsedQuery.type) {
    // Write JSON representations of the rows
    case 'SELECT':
      sparqlIterator.on('data', function (row) {
        console.log(JSON.stringify(row));
      });
    break;
    // Write an RDF representation of all results
    case 'CONSTRUCT':
    case 'DESCRIBE':
      var writer = new N3.Writer(process.stdout, config.prefixes);
      sparqlIterator.on('data', function (triple) { writer.addTriple(triple); })
                    .on('end',  function () { writer.end(); });
    break;
    default:
      throw new SparqlIterator.UnsupportedQueryError(query);
  }

  // Report an error's stack trace
  sparqlIterator.on('error', function (error) {
    console.error('ERROR: An error occured during query execution.\n');
    console.error(error.stack);
  });
}
// Report a synchronous error
catch (error) {
  console.error('ERROR: Query execution could not start.\n');
  switch (error.name) {
    case 'SparqlSyntaxError':
    case 'UnsupportedQueryError':
      console.error(error.message);
      break;
    default:
      console.error(error.stack);
  }
}
